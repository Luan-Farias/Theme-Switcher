{"version":3,"sources":["utils/usePersistedState.ts","styles/themes/light.ts","styles/themes/dark.ts","components/Header/styles.ts","components/Header/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["usePersistedState","key","initialState","useState","storageValue","localStorage","getItem","JSON","parse","state","setState","useEffect","setItem","stringify","title","colors","primary","secondary","background","text","Container","styled","div","props","theme","Header","toggleTheme","useContext","ThemeContext","onChange","checked","checkedIcon","uncheckedIcon","height","width","handleDiameter","offColor","shade","onColor","createGlobalStyle","App","dark","setTheme","className","light","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAwBeA,MAjBf,SAA8BC,EAAaC,GAA+B,IAAD,EAC7CC,oBAAS,WACjC,IAAMC,EAAeC,aAAaC,QAAQL,GAE1C,OAAIG,EACKG,KAAKC,MAAMJ,GAEbF,KAP8D,mBAChEO,EADgE,KACzDC,EADyD,KAcvE,OAJAC,qBAAU,WACRN,aAAaO,QAAQX,EAAKM,KAAKM,UAAUJ,MACxC,CAACR,EAAKQ,IAEF,CAACA,EAAOC,ICrBF,GACbI,MAAO,QAEPC,OAAQ,CACNC,QAAS,UACTC,UAAW,UAEXC,WAAY,UACZC,KAAM,SCRK,GACbL,MAAO,OAEPC,OAAQ,CACNC,QAAS,OACTC,UAAW,UAEXC,WAAY,OACZC,KAAM,S,kQCNH,IAAMC,EAAYC,IAAOC,IAAV,KAEA,SAAAC,GAAK,OAAIA,EAAMC,MAAMT,OAAOC,WC6BnCS,EArBiB,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAC1BF,EAAQG,qBAAWC,KACzB,OACE,kBAACR,EAAD,oBAGE,kBAAC,IAAD,CACES,SAAUH,EACVI,QAAyB,SAAhBN,EAAMV,MACfiB,aAAa,EACbC,eAAe,EACfC,OAAQ,GACRC,MAAO,GACPC,eAAgB,GAChBC,SAAUC,YAAM,IAAMb,EAAMT,OAAOC,SACnCsB,QAASd,EAAMT,OAAOE,c,oRCzBfsB,kBAAf,KASwB,SAAAhB,GAAK,OAAIA,EAAMC,MAAMT,OAAOG,cAEvC,SAAAK,GAAK,OAAIA,EAAMC,MAAMT,OAAOI,QCc1BqB,MAjBf,WAAgB,IAAD,EACaxC,EAAgC,QAASyC,GADtD,mBACNjB,EADM,KACCkB,EADD,KAOb,OACE,kBAAC,IAAD,CAAelB,MAAOA,GACpB,yBAAKmB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQjB,YARM,WAClBgB,EAAyB,UAAhBlB,EAAMV,MAAoB2B,EAAOG,SCV9CC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.5702d138.chunk.js","sourcesContent":["import { useState, useEffect, Dispatch, SetStateAction } from \"react\";\n\ntype Response<T> = [\n  T,\n  Dispatch<SetStateAction<T>>\n];\n\nfunction usePersistedState<T>(key: string, initialState: T): Response<T> {\n  const [state, setState] = useState(()=>{\n    const storageValue = localStorage.getItem(key);\n\n    if (storageValue) {\n      return JSON.parse(storageValue);\n    }\n    return initialState;\n  });\n\n  useEffect(()=>{\n    localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n}\n\nexport default usePersistedState;","export default {\n  title: 'light',\n\n  colors: {\n    primary: '#C62E65',\n    secondary: '#D63AF9',\n\n    background: '#F5F5F5',\n    text: '#333'\n  },\n};","export default {\n  title: 'dark',\n\n  colors: {\n    primary: '#333',\n    secondary: '#C62E65',\n\n    background: '#222',\n    text: '#FFF'\n  },\n};","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  height: 60px;\n  background-color: ${props => props.theme.colors.primary};\n  color: #FFF;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 30px;\n`;\n","import React, { useContext } from 'react';\nimport Switch from 'react-switch';\nimport { ThemeContext } from 'styled-components';\nimport { shade } from \"polished\";\n\nimport { Container } from './styles';\n\ninterface Props\n{\n  toggleTheme():void;\n}\n\nconst Header: React.FC<Props> = ({toggleTheme}) => {\n  const theme = useContext(ThemeContext);\n  return (\n    <Container>\n      Hello World!\n\n      <Switch \n        onChange={toggleTheme}\n        checked={theme.title === 'dark'}\n        checkedIcon={false}\n        uncheckedIcon={false}\n        height={10}\n        width={40}\n        handleDiameter={20}\n        offColor={shade(0.15, theme.colors.primary)}\n        onColor={theme.colors.secondary}\n      />\n    </Container>\n  );\n}\n\nexport default Header;","import { createGlobalStyle } from \"styled-components\";\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    background-color: ${props => props.theme.colors.background};\n    font-size: 14px;\n    color: ${props => props.theme.colors.text};\n    font-family: sans-serif;\n  }\n`;","import React from 'react';\nimport { ThemeProvider, DefaultTheme } from \"styled-components\";\nimport usePersistedState from './utils/usePersistedState';\n\nimport light from './styles/themes/light';\nimport dark from './styles/themes/dark';\n\nimport Header from './components/Header';\nimport GlobalStyles from './styles/global';\n\nfunction App() {\n  const [theme, setTheme] = usePersistedState<DefaultTheme>('theme', dark);\n\n  const toggleTheme = () => {\n    setTheme(theme.title === 'light' ? dark : light);\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <GlobalStyles />\n        <Header toggleTheme={toggleTheme} />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}